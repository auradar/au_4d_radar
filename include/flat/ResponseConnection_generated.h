// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSECONNECTION_AU_H_
#define FLATBUFFERS_GENERATED_RESPONSECONNECTION_AU_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace AU {

struct ResponseConnection;
struct ResponseConnectionBuilder;

struct ResponseConnection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResponseConnectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSSG_TYPE = 4,
    VT_CLIENT_HOSTNAME = 6
  };
  const ::flatbuffers::String *mssg_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSSG_TYPE);
  }
  const ::flatbuffers::String *client_hostname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLIENT_HOSTNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSSG_TYPE) &&
           verifier.VerifyString(mssg_type()) &&
           VerifyOffset(verifier, VT_CLIENT_HOSTNAME) &&
           verifier.VerifyString(client_hostname()) &&
           verifier.EndTable();
  }
};

struct ResponseConnectionBuilder {
  typedef ResponseConnection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mssg_type(::flatbuffers::Offset<::flatbuffers::String> mssg_type) {
    fbb_.AddOffset(ResponseConnection::VT_MSSG_TYPE, mssg_type);
  }
  void add_client_hostname(::flatbuffers::Offset<::flatbuffers::String> client_hostname) {
    fbb_.AddOffset(ResponseConnection::VT_CLIENT_HOSTNAME, client_hostname);
  }
  explicit ResponseConnectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ResponseConnection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ResponseConnection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ResponseConnection> CreateResponseConnection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> mssg_type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> client_hostname = 0) {
  ResponseConnectionBuilder builder_(_fbb);
  builder_.add_client_hostname(client_hostname);
  builder_.add_mssg_type(mssg_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ResponseConnection> CreateResponseConnectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *mssg_type = nullptr,
    const char *client_hostname = nullptr) {
  auto mssg_type__ = mssg_type ? _fbb.CreateString(mssg_type) : 0;
  auto client_hostname__ = client_hostname ? _fbb.CreateString(client_hostname) : 0;
  return AU::CreateResponseConnection(
      _fbb,
      mssg_type__,
      client_hostname__);
}

inline const AU::ResponseConnection *GetResponseConnection(const void *buf) {
  return ::flatbuffers::GetRoot<AU::ResponseConnection>(buf);
}

inline const AU::ResponseConnection *GetSizePrefixedResponseConnection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AU::ResponseConnection>(buf);
}

inline bool VerifyResponseConnectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AU::ResponseConnection>(nullptr);
}

inline bool VerifySizePrefixedResponseConnectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AU::ResponseConnection>(nullptr);
}

inline void FinishResponseConnectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AU::ResponseConnection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseConnectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AU::ResponseConnection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AU

#endif  // FLATBUFFERS_GENERATED_RESPONSECONNECTION_AU_H_
